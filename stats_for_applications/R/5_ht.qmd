---
title: "Hypothesis Testing"
author: "Hans Elliott"
format: html
---

## Chi-Squared Test of Propotions

```{r}
#  Data
jurors <- data.frame(
    observed_counts = c(205, 26, 25, 19),
    population_prop = c(0.72, 0.07, 0.12, 0.09),
    row.names = c("White", "Black", "Hispanic", "Other")
)

sum(jurors$observed_counts)
sum(jurors$population_prop)

#  Hypotheses
# H_0: the distribution of race in the juror population is
#     the same as that in the county population
# H_1: the distribution of juror race differs
#
# compare H_0 and H_1 with significance level alpha and pivotal chi^2_{K - 1}

#  Compute Test statistic
n <- sum(jurors$observed_counts)     # sample size
K <- nrow(jurors)                    # number of categories
alpha <- 0.05                        # level of the test - type 1 error
p_hat <- jurors$observed_counts / n  # sample proportions
p_nul <- jurors$population_prop      # null hypothesis - population proportions

# test statistic
(T_n <- n * sum( (p_hat - p_nul)^2 / p_nul ))

#  Evaluate Test
# chi-squared quantile at level alpha
(q_alpha <- qchisq(p = 1 - alpha, df = K - 1))

(reject <- abs(T_n) > q_alpha)

# p_val
(p_val <- 1 - pchisq(T_n, df = K - 1))

# p > alpha, fail to reject the null
(p_val > alpha)


# compare with R's function:
chisq.test(
    x = jurors$observed_counts,
    p = jurors$population_prop
)
```

## One-Sample (Student) T Test

```{r}
#  Data
set.seed(2275)
mu_0 <- 10
normdata <- data.frame(x = rnorm(100, mean = mu_0, sd = 5))

# Hypothesis
# H_0: the population mean is equal to mu_0
# H_1: the population mean is not equal to mu_0
#
# Compare at level alpha, with pivotal t_{n-1}
alpha <- 0.05
n <- nrow(normdata)
X_bar <- mean(normdata$x) # sample average
S <- sum((normdata$x - X_bar)^2) / (n) # (biased) sample variance

# Test Statistic
(T_n <- sqrt(n - 1) * (X_bar - mu_0) / sqrt(S))

# Test
(q_alpha <- qt(1 - alpha/2, df = n - 1)) # looking it up in the back of the book
(reject <- (abs(T_n) > q_alpha))

# p-value (2 sided)
(pval <- 2 * (1 - pt(abs(T_n), df = n - 1)))

# pval > alpha, fail to reject null
(pval > alpha)

# 95% confidence int
# X_bar +- t_{n-1}(alpha/2) * sqrt{S} / sqrt{n}
dev <- q_alpha * (sqrt(S) / sqrt(n))
c(X_bar - dev, X_bar, X_bar + dev)

# compare with R
t.test(normdata$x, mu = mu_0)
```

## Two-Sample (Student) T Test

```{r}
#  Data
set.seed(2275)
mu_x <- 10 # note - different mus
mu_y <- 12
normdata <- data.frame(x = rnorm(100, mean = mu_x, sd = 5),
                       y = rnorm(100, mean = mu_y, sd = 5))

# Hypothesis
# H_0: the population means are equal
# H_1: the population means are not equal
#
# Compare at level alpha, with pivotal t_{d}
alpha <- 0.05
n <- m <- nrow(normdata)
X_bar <- mean(normdata$x) # sample average
Y_bar <- mean(normdata$y)
Sx <- sum((normdata$x - X_bar)^2) / (n - 1) # (unbiased) sample variance
Sy <- sum((normdata$y - Y_bar)^2) / (m - 1) # (unbiased) sample variance

# Test Statistic
(T_n <- (X_bar - Y_bar) / sqrt((Sx / n) + (Sy / n)))

# Degrees of Freedom (for populations with different variance)
(d <-
    (Sx/n + Sy/m)^2 /
    ((Sx^2)/((n^2)*(n-1)) + (Sy^2)/((m^2)*(m-1)))
)

# Test
(q_alpha <- qt(1 - alpha/2, df = d)) # looking it up in the back of the book
(reject <- (abs(T_n) > q_alpha))

# p-value (2-sided)
(pval <- 2 * (1 - pt(abs(T_n), df = d)))

# pval > alpha, fail to reject null
(pval > alpha)

# 95% confidence int for diff between means
# (X_bar - Y_bar) +- t_{d}(alpha/2) * SE_pooled
## pooled standard error
(SE_p <- sqrt((Sx / n) + (Sy / m)))
delta <- X_bar - Y_bar
dev <- q_alpha * SE_p
c(delta - dev, delta, delta + dev)

# compare with R
## note - Welch's t-test is designed for unequal population variances, whereas
## Student's assumes equal variances, but the assumption of normality is
## maintained. I simulated equal variances.
t.test(x = normdata$x, y = normdata$y)
```
